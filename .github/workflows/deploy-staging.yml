name: Deploy to Staging

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

jobs:
  # Detectar cambios en archivos para filtrar deployments
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    # Solo ejecutar si CI fue exitoso
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  deploy-frontend-staging:
    name: Deploy Frontend to Vercel Staging
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Get commit info
        id: commit
        run: |
          echo "message=$(git log -1 --pretty=%B | head -n 1)" >> $GITHUB_OUTPUT
          echo "sha=$(git log -1 --pretty=%h)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Vercel CLI
        run: pnpm install -g vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: frontend
        run: vercel pull --yes --environment=staging --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        working-directory: frontend
        run: vercel build --target=staging --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Staging
        working-directory: frontend
        run: |
          echo "ðŸš€ Deploying commit: ${{ steps.commit.outputs.sha }} - ${{ steps.commit.outputs.message }}"
          echo "ðŸ‘¤ Author: ${{ steps.commit.outputs.author }}"
          vercel deploy --prebuilt --target=staging \
            --meta gitCommitSha="${{ steps.commit.outputs.sha }}" \
            --meta gitCommitMessage="${{ steps.commit.outputs.message }}" \
            --meta gitCommitAuthor="${{ steps.commit.outputs.author }}" \
            --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-backend-staging:
    name: Deploy Backend to Railway Staging
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Get commit info
        id: commit
        run: |
          echo "message=$(git log -1 --pretty=%B | head -n 1)" >> $GITHUB_OUTPUT
          echo "sha=$(git log -1 --pretty=%h)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Staging
        run: |
          echo "ðŸš€ Deploying commit: ${{ steps.commit.outputs.sha }} - ${{ steps.commit.outputs.message }}"
          echo "ðŸ‘¤ Author: ${{ steps.commit.outputs.author }}"
          railway up --service=${{ secrets.RAILWAY_SERVICE_NAME }} --environment=staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
